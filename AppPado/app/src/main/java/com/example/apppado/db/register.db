import android.content.Context;
import android.content.res.AssetManager;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class DBHelper extends SQLiteOpenHelper {
    private static final String DB_NAME = "register.db";
    private static final int DB_VERSION = 1;
    private final Context context;

    public DBHelper(Context context) {
        super(context, DB_NAME, null, DB_VERSION);
        this.context = context;
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        // No need to create the database structure here if you have it pre-populated.
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Handle database upgrades if needed.
    }

    public void copyDatabase() throws IOException {
        AssetManager assetManager = context.getAssets();

        // Path to the just created empty db
        String dbPath = context.getDatabasePath(DB_NAME).getPath();

        // Open the empty db as the output stream
        OutputStream outputStream = new FileOutputStream(dbPath);

        // Transfer bytes from the asset file to the destination file
        byte[] buffer = new byte[1024];
        int length;
        InputStream inputStream = assetManager.open(DB_NAME);
        while ((length = inputStream.read(buffer)) > 0) {
            outputStream.write(buffer, 0, length);
        }

        // Close the streams
        outputStream.flush();
        outputStream.close();
        inputStream.close();
    }

    public SQLiteDatabase openDatabase() throws SQLException {
        // Open the database
        String dbPath = context.getDatabasePath(DB_NAME).getPath();
        return SQLiteDatabase.openDatabase(dbPath, null, SQLiteDatabase.OPEN_READWRITE);
    }
}
